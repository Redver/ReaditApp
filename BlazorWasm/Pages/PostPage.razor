@inject IPostService PostService
@page "/Post/{id:int}"
@using BlazorWasm.Services.Http
@using BlazorWasm.Services
@using System.Collections.ObjectModel
@using System.Runtime.InteropServices.JavaScript
@using DataStructures
@using Domain.DTOs
@using Domain.Models
@inject IAuthService authService

<AuthorizeView>
    <NotAuthorized>
                <div class="header">
                    <PageTitle>Readit Front Page</PageTitle>
        
                    <h1>Readit App</h1>
        
                    Welcome, please log in or register to access this post.
                </div>
    </NotAuthorized>
    <Authorized>
    <div class = "header">
        <h1>Readit</h1>
        </div>

<div class="container">
    <div class="content">
        <div class="post">
            <h2 class="post-title">@title</h2>
            <p class="post-content">@content</p>
            <div class ="post-info">
                <div class="post-info-text ">Posted By:@author, Posted On:@datePosted</div>
            </div>
        </div>
                    <div class="comments">
                        <h2>Comments</h2>
                        @if (!(comments == null) )
                        {
                            @foreach (var post in comments)
                            {
                                <div class="comment">
                                    <p class="comment-author">@post.Author</p>
                                    <p class="comment-date">@post.Author</p>
                                    <p class="comment-content">
                                        @post.Content
                                    </p>
                                </div>
                            } 
                        }
                        else
                        {
                            <h3>There are no comments</h3>
                        }
                        </div>
    </div>

    <div class="sidebar">
        <div class="new-post">
            <h2>Create a New Comment</h2>
            <textarea @bind="newComment" placeholder="Your comment content" class="new-post-content"></textarea>
            <button class="new-post-button" @onclick="RefreshPost">Submit</button>
        </div>
    </div>
</div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public int Id { get; set; }

    private string errorLabel;
    private string title = "placeholder";
    private string content = "placeholder";
    private Post _thisPostPage;
    private string author = "placeholder";
    private DateTime datePosted = new DateTime();
    private List<Post> comments;

    private string newComment = "Write your comment here";
    
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        errorLabel = "";
        try
        {
            IEnumerable<Post> postList = await PostService.GetAllAsync();
            List<Post> post = postList.ToArray().ToList();
            for (int i = 0; i < post.Count; i++)
            {
                Console.WriteLine(post[i]);
            }
            Console.WriteLine(Id);
            _thisPostPage = post[Id-1];
            title = _thisPostPage.Title;
            content = _thisPostPage.Content;
            author = _thisPostPage.Author;
            datePosted = _thisPostPage.PostDate;
            comments = _thisPostPage.Comments;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }
    
    private async Task RefreshPost()
    {
        try
        {
            var authState = await authService.GetAuthAsync();
            var user = authState.Identity;

            var update = new PostUpdateDto(Id, user.Name, newComment);
            errorLabel = "";
            try
            {
                await PostService.UpdateAsync(update);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                errorLabel = $"Error: {e.Message}";
            }
            
            IEnumerable<Post> postList = await PostService.GetAllAsync();
            List<Post> post = postList.ToArray().ToList();
            for (int i = 0; i < post.Count; i++)
            {
                Console.WriteLine(post[i]);
            }
            Console.WriteLine(Id);
            _thisPostPage = post[Id-1];
            title = _thisPostPage.Title;
            content = _thisPostPage.Content;
            author = _thisPostPage.Author;
            datePosted = _thisPostPage.PostDate;
            comments = _thisPostPage.Comments;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        } 
    }

}
