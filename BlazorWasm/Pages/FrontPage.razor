@page "/FrontPage"
@using BlazorWasm.Services
@using Domain.DTOs
@using Domain.Models
@inject IPostService PostService
@inject IAuthService authService
@inject NavigationManager navMgr
<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <PageTitle>Readit Front Page</PageTitle>

            <h1>Readit App</h1>

            Welcome, please log in or register to access the front page.
        </div>
    </NotAuthorized>
    <Authorized>
        <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f7f7f7;
            margin: 0;
        }
        
        header {
            background-color: #333;
            color: #fff;
            padding: 10px;
            text-align: center;
            z-index: 2;
        }
        
        h1 {
            margin: 0;
            z-index: 3;
        }
        
        .container {
            max-width: 800px;
            margin: 20px auto;
            display: flex;
            flex-direction: column;
            z-index: 4;
        }
        
        .post-card {
            background-color: #fff;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            padding: 10px;
        }
        
        .post-title {
            font-size: 18px;
        }
        
        .post-author {
            color: #666;
            font-size: 14px;
        }
        
        .post-date {
            color: #666;
            font-size: 14px;
        }
        
        .new-post {
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 20px;
        }
        
        .new-post-title,
        .new-post-content {
            width: 100%;
            margin-bottom: 10px;
            padding: 5px;
        }
        
        .new-post-button {
            background-color: #ff4500;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
        }
.container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
}

.content {
    flex: 1;
    background-color: #fff;
    padding: 20px;
}

.sidebar {
  width: 360px; /* Set the width of the sidebar */
  position: fixed; /* Fixed Sidebar (stay in place on scroll) */
  top: 150px; /* Stay at the top */
  left: 20px;
  background-color: #fff; /* Black */
  overflow-x: hidden; /* Disable horizontal scroll */
  padding-top: 20px;
}

        </style>
    <header>
        <h1>Readit</h1>
        <h2>Hi,@context.User.Identity.Name</h2>
        </header>
  <body>
  <div class="container">
      <div class="content">
          <div class="sidebar">
              <div class="new-post">
                  <h2>Create a New Post</h2>
                  <form>
                      <input type="text" @bind="title" placeholder="Title" class="new-post-title">
                      <textarea @bind="content" placeholder="Your post"  class="new-post-content"></textarea>
                      <button class="new-post-button" @onclick = "AddNewPost">Submit</button>
                  </form>
              </div>
          </div>
          <div class="post-list">
              <div class="post-card">
                  @foreach (var post in AllPostsList)
                  {
                      <div class="post">
                                  <h2 class="post-title"><a href="/post/@post.Id">@post.Title</a></h2>
                                  <p class="post-author">Posted by @post.Author</p>
                                  <p class="post-date">Date: @post.PostDate</p>
                                  <p class="post-content">@post.Content</p>
                              </div>
                  }
              </div>
          </div>
      </div>
  </div>
  </body>
    </Authorized>
</AuthorizeView>

@code {
    private string errorLabel;
    private string title;
    private string content;
    private List<Post> AllPostsList = new List<Post>();

    protected override async Task OnInitializedAsync()  
    {
        var authState = await authService.GetAuthAsync();
        if (authState.Identity.IsAuthenticated)
        {
            try
            {
                var enumerable = await PostService.GetAllAsync();
                var allPosts = enumerable.ToList();
                for (int i = 0; i < allPosts.Count(); i++)
                {
                    AllPostsList[i] = allPosts[i];
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                errorLabel = $"Error: {e.Message}";
            }
        }
        else
        {
            errorLabel = "User is not authenticated.";
        }
        errorLabel = "";
    }

    private async Task AddNewPost()
    {
        var authState = await authService.GetAuthAsync();
        var user = authState.Identity;

        string author = user.Name;
        var createDto = new PostCreateDto(title, author, content);
        Console.WriteLine(title,author,content);
        errorLabel = "";
        try
        {
            await PostService.CreateAsync(createDto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

}