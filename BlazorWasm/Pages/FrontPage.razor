@page "/FrontPage"
@using BlazorWasm.Services
@using Domain.DTOs
@using Domain.Models
@inject IPostService PostService
@inject IAuthService authService
@inject NavigationManager navMgr
<AuthorizeView>
    <NotAuthorized>
        <div class="header">
            <PageTitle>Readit Front Page</PageTitle>

            <h1>Readit App</h1>

            Welcome, please log in or register to access the front page.
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="header">
                    <h1>Readit</h1>
                    <h2>Hi,@context.User.Identity.Name</h2>
        </div>

        <div class="container">
            <div class="content">
                <div class="sidebar">
                    <div class="new-post">
                        <h2>Create a New Post</h2>
                            <input type="text" @bind="title" placeholder="Title" class="new-post-title">
                            <textarea @bind="content" placeholder="Your post"  class="new-post-content"></textarea>
                            <button class="new-post-button" @onclick="AddNewPost">Submit</button>
                    </div>
                </div>
                <div class="post-list">
                    <div class="post-card">
                        @foreach (var post in AllPostsList)
                        {
                            <div class="post">
                                <h2 class="post-title"><a href="/post/@post.Id">@post.Title</a></h2>
                                <p class="post-author">Posted by @post.Author</p>
                                <p class="post-date">Date: @post.PostDate</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
</AuthorizeView>

@code {
    private string errorLabel;
    private string title;
    private string content;
    private List<Post> AllPostsList = new List<Post>();

    protected override async Task OnInitializedAsync()  
    {
        try
        {
            var enumerable = await PostService.GetAllAsync();
            var allPosts = enumerable.ToList();
            int maxValue = allPosts.Count;
            for (int i = 0; i < maxValue; i++)
            {
                AllPostsList.Add(allPosts[maxValue-i-1]);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

    private async Task AddNewPost()
    {
        var authState = await authService.GetAuthAsync();
        var user = authState.Identity;

        string author = user.Name;
        var createDto = new PostCreateDto(title, author, content);
        Console.WriteLine(title,author,content);
        errorLabel = "";
        try
        {
            await PostService.CreateAsync(createDto);
            var enumerable = await PostService.GetAllAsync();
            var allPosts = enumerable.ToList();
            int maxValue = allPosts.Count;
            navMgr.NavigateTo("/Post/"+maxValue);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

}